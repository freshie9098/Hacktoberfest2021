Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
         vector<vector<int>> v;
        if(n<4){
            return v;
        }
        sort(nums.begin(),nums.end());
       for(int i = 0;i<n-3;i++){
           if(i>0&&nums[i]==nums[i-1]) continue;
           if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target)break;
           if(nums[i]+nums[n-1]+nums[n-2]+nums[n-3]<target)continue;
    
           for(int j = i + 1;j<n-2;j++){
                if(j>i+1&&nums[j]==nums[j-1]) continue;
           if(nums[j]+nums[j+1]+nums[j+2]+nums[i]>target)break;
           if(nums[j]+nums[n-1]+nums[n-2]+nums[i]<target)continue;
            int left = j + 1, right = n-1;
               while(left<right){
                   int sum = nums[i] + nums[j] + nums[left] + nums[right];
                   if(sum<target)left++;
                   else if(sum>target)right--;
                   else{
                       v.push_back({nums[i],nums[j],nums[left],nums[right]});
do{left++;}while(left<right&&nums[left]==nums[left-1]);
do{right--;}while(left<right&&nums[right]==nums[right+1]);                       
                   }
               }
           }
       }
        return v;
    }
};

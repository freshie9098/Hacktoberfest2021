Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> v;
        int n = nums.size();
        if(n<3){
            return v;
        }
        set<vector<int>>s;
       sort(nums.begin(),nums.end());
        for(int i = 0 ; i  < n ;++i){
            int l = i+1;
            int r = n-1;
            while(l<r){
                int sum = nums[i]+nums[l]+nums[r];
                if(sum==0){
                   s.insert({nums[i],nums[l],nums[r]});r--;
                }
                else if(sum<0){
                    l++;
                }
                else{
                    r--;
                }
            }
        }
        for(auto it:s){v.push_back(it);}
        return v;
    }
};
